@page "/clientes/ultimos-testes"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using LoginFrontEnd.Providers
@using System.Net.Http
@using System.Net.Http.Json
@using LoginFrontEnd.Services
@using LoginFrontEnd.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ClienteService ClienteService

@attribute [Authorize]
<div class="container mt-5">
	<h1 class="text-center">Clientes</h1>
	<h3>Ultimos testes</h3>
	@if (ClienteService.Testes != null)
	{
		// Convertendo a lista de Teste para Cliente
		var clientes = ClienteService.Testes.Select(t => new Cliente(t)).ToList();
		//invertendo a lista de clientes pela data de adição
		clientes = clientes.OrderByDescending(c => c.AdicionadoDate).ToList();
		//pegando os clientes dos ultimos 7 dias
		clientes = clientes.Where(c => c.AdicionadoDate >= DateTime.Now.AddDays(-7)).ToList();

		<div class="table-responsive">
			<table class="table table-striped mt-3">
				<thead>
					<tr>
						<th>Login</th>
						<th>Senha</th>
						<th>Criado</th>
						<th>Celular</th>
						<th>Email</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var cliente in clientes)
					{
						<tr>
							<td>@cliente.Login</td>
							<td>@cliente.Senha</td>
							<td>@cliente.AdicionadoDate</td>
							<td>@cliente.Celular</td>
							<td>@cliente.Email</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
	else
	{
		<p>Carregando...</p>
	}
</div>

@code {
	private string? token { get; set; } = "";
	private string? userName { get; set; } = "";

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		token = user.FindFirst("Token")?.Value;
		userName = user.FindFirst(ClaimTypes.Name)?.Value;

		if (!string.IsNullOrEmpty(token))
		{
			await ClienteService.LoadData(token);
		}
	}

	public class Cliente
	{
		public int id { get; set; }
		public string Login { get; set; }
		public string Senha { get; set; }
		private string Adicionado { get; set; }
		//quero conveter a string Adicionado para DateTime ela está em formato ISO 8601
		public DateTime AdicionadoDate
		{
			get
			{
				return DateTime.Parse(Adicionado, null, System.Globalization.DateTimeStyles.RoundtripKind);
			}
		}
		public string Celular { get; set; }
		public string Email { get; set; }
		public Cliente(Teste teste)
		{
			id = teste.id;
			Login = teste.Login;
			Senha = teste.Senha;
			Adicionado = teste.Adicionado;
			Celular = teste.Celular;
			Email = teste.Email;
		}
	}

}
