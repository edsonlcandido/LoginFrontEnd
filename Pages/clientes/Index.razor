@page "/clientes"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using LoginFrontEnd.Providers
@using System.Net.Http
@using System.Net.Http.Json
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CustomHttpClientProvider CustomHttpClientProvider

@attribute [Authorize]
<div class="container mt-5">
	<h1 class="text-center">Clientes</h1>
	
	@if (clientWrapper != null)
	{
		<h4>Expirando Hoje</h4>
		var clientsExpiringToday = clientWrapper.GetClientsExpiringToday();
		if (clientsExpiringToday.Any())
		{

			@foreach (var client in clientsExpiringToday)
			{
				<div class="card w-100 mt-5">
					<div class="card-body">
						<div class="row mb-3">
							<div class="col-md-4">
								<strong>Username:</strong> @client.username
							</div>
							<div class="col-md-4">
								<strong>Password:</strong> @client.password
							</div>
							<div class="col-md-4">
								<strong>Reseller Notes:</strong> @client.reseller_notes
							</div>
						</div>

					</div>
				</div>
			}
		}
		else
		{
			<p>Nenhum cliente expira hoje.</p>
		}
	}



	<p>Todos clientes</p>
	@if (fastClients != null)
	{
		<div class="table-responsive">
			<table class="table table-striped mt-3">
				<thead>
					<tr>
						<th>Username</th>
						<th>Password</th>
						<th>Exp Date</th>
						<th>Admin Notes</th>
						<th>Reseller Notes</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var cliente in fastClients)
					{
						<tr>
							<td>@cliente.username</td>
							<td>@cliente.password</td>
							<td>@cliente.exp_date</td>
							<td>@cliente.admin_notes</td>
							<td>@cliente.reseller_notes</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
	else
	{
		<p>Carregando...</p>
	}
	}
</div>

@code {
	private string? token { get; set; } = "";
	private string? userName { get; set; } = "";
	private List<FastClient>? fastClients { get; set; }
	private List<Teste>? testes { get; set; }
	private ClientWrapper? clientWrapper { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		token = user.FindFirst("Token")?.Value;
		userName = user.FindFirst(ClaimTypes.Name)?.Value;

		if (!string.IsNullOrEmpty(token))
		{
			// Limpar os cabeçalhos antes de adicionar o token
			CustomHttpClientProvider.DefaultRequestHeaders.Clear();
			CustomHttpClientProvider.DefaultRequestHeaders.Add("xc-token", token);

			var fastClientesResponse = await CustomHttpClientProvider.GetFromJsonAsync<List<FastClientResponse>>("https://bypass.ehtudo.app/https://eh-tudo-n8n.aiyfgd.easypanel.host/webhook/iptv-backend/v1/listar-clientes");
			if (fastClientesResponse != null && fastClientesResponse.Any())
			{
				fastClients = fastClientesResponse.FirstOrDefault()?.data;
			}

			var testesResponse = await CustomHttpClientProvider.GetFromJsonAsync<TestesResponse>("https://bypass.ehtudo.app/https://eh-tudo-nocodb.aiyfgd.easypanel.host/api/v2/tables/mkdo3202f4rv75a/records?limit=1000");
			if (testesResponse != null)
			{
				testes = testesResponse.list;
			}

			if (fastClients != null && testes != null)
			{
				clientWrapper = new ClientWrapper(fastClients, testes);
			}
		}
	}

	public class FastClientResponse
	{
		public int statusCode { get; set; }
		public bool result { get; set; }
		public List<FastClient>? data { get; set; }
		public int totalClients { get; set; }
		public int totalPages { get; set; }
	}

	public class FastClient
	{
		public int id { get; set; }
		public int member_id { get; set; }
		public string username { get; set; }
		public string password { get; set; }
		public long exp_date { get; set; }
		public int admin_enabled { get; set; }
		public int enabled { get; set; }
		public string admin_notes { get; set; }
		public string reseller_notes { get; set; }
		public string bouquet { get; set; }
		public int max_connections { get; set; }
		public int is_trial { get; set; }
		public long created_at { get; set; }
	}

	public class TestesResponse
	{
		public List<Teste> list { get; set; }
		public PageInfo pageInfo { get; set; }
	}

	public class Teste
	{
		public int id { get; set; }
		public string Login { get; set; }
		public string Senha { get; set; }
		public string Adicionado { get; set; }
		public string Celular { get; set; }
		public string Email { get; set; }
	}

	public class PageInfo
	{
		public int pageSize { get; set; }
		public int totalRows { get; set; }
		public bool isFirstPage { get; set; }
		public bool isLastPage { get; set; }
		public int page { get; set; }
	}

	public class ClientWrapper
	{
		private List<FastClient> fastClients;
		private List<Teste> testes;

		public ClientWrapper(List<FastClient> fastClients, List<Teste> testes)
		{
			this.fastClients = fastClients;
			this.testes = testes;
		}

		private DateTime ConvertFromUnixTimestamp(long timestamp)
		{
			DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(timestamp);
			return dateTimeOffset.DateTime;
		}

		public List<FastClient> GetClientsExpiringInNext3Days()
		{
			DateTime now = DateTime.Now;
			DateTime next3Days = now.AddDays(3);

			return fastClients.Where(client =>
				ConvertFromUnixTimestamp(client.exp_date) >= now &&
				ConvertFromUnixTimestamp(client.exp_date) <= next3Days).ToList();
		}

		public List<FastClient> GetClientsExpiringToday()
		{
			DateTime today = DateTime.Today;

			return fastClients.Where(client =>
				ConvertFromUnixTimestamp(client.exp_date).Date == today).ToList();
		}

		public List<FastClient> GetClientsExpiringInFuture()
		{
			DateTime now = DateTime.Now;

			return fastClients.Where(client =>
				ConvertFromUnixTimestamp(client.exp_date) > now).ToList();
		}
	}
}
