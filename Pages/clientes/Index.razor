@page "/clientes"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using LoginFrontEnd.Providers
@using System.Net.Http
@using System.Net.Http.Json
@using LoginFrontEnd.Services
@using LoginFrontEnd.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CustomHttpClientProvider CustomHttpClientProvider
@inject ClienteService ClienteService

@attribute [Authorize]
<div class="container mt-5">
	<h1 class="text-center">Clientes</h1>
	
	@if (ClienteService.FastClients != null)
	{
		var clientsExpiringToday = ClienteService.ClientesExpirandoHoje(token);
		if (clientsExpiringToday.Result != null)
		{
			<h4>Expirando Hoje</h4>
			@foreach (var cliente in clientsExpiringToday.Result)
			{				
				<div class="card w-100">
					<div class="card-body">
						<div class="row mb-3">
							<div class="col-12">
								<strong>Username:</strong> @cliente.Username
							</div>
							<div class="col-12">
								<strong>Password:</strong> @cliente.Password
							</div>
							<div class="col-12">
								<strong>Data:</strong> @cliente.DataExpiracao.ToString("dd/MM/yyyy")
							</div>
							<div class="col-12">
								<strong>Teste:</strong> @(cliente.Teste ? "Sim" : "Não")
							</div>
							<div class="col-12">
								<strong>Notas:</strong> @cliente.Notas
							</div>
						</div>
					</div>
				</div>
			}
		}
		else
		{
			<p>Nenhum cliente expira hoje.</p>
		}
	}else{
		
	}
	
	@if (ClienteService.FastClients != null)
	{
		var clientsExpiringInNext3Days = ClienteService.ClientesExpirandoEm3Dias(token);
		if (clientsExpiringInNext3Days.Result != null)
		{
			<h4>Clientes expirando</h4>
			@foreach (var cliente in clientsExpiringInNext3Days.Result)
			{				
				<div class="card w-100 mt-3">
					<div class="card-body">
						<div class="row">
							<div class="col-md-4">
								<strong>Username:</strong> @cliente.Username
							</div>
							<div class="col-md-4">
								<strong>Password:</strong> @cliente.Password
							</div>
							<div class="col-md-4">
								<strong>Data:</strong> @cliente.DataExpiracao.ToString("dd/MM/yyyy")
							</div>
							<div class="col-md-4">
								<strong>Teste:</strong> @(cliente.Teste ? "Sim" : "Não")
							</div>
							<div class="col-md-4">
								<strong>Notas:</strong> @cliente.Notas
							</div>
						</div>
					</div>
				</div>
			}
		}
		else
		{
			<p>Nenhum cliente expira nos próximos 3 dias.</p>
		}
	}else{
	}

	<h4>Todos clientes</h4>
	@if (ClienteService.FastClients != null)
	{
		<div class="table-responsive">
			<table class="table table-striped mt-3">
				<thead>
					<tr>
						<th>Username</th>
						<th>Password</th>
						<th>Expiração</th>
						<th>Teste</th>
						<th>Notas</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var cliente in ClienteService.Clientes.OrderByDescending(x => x.DataExpiracao))
					{
						<tr>
							<td>@cliente.Username</td>
							<td>@cliente.Password</td>
							<td>@cliente.DataExpiracao</td>
							<td>@(cliente.Teste ? "Sim" : "Não")</td>
							<td>@cliente.Notas</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
	else
	{
		<p>Carregando...</p>
	}
</div>

@code {
	private string? token { get; set; } = "";
	private string? userName { get; set; } = "";
	private List<FastClient>? fastClients { get; set; }
	private List<Teste>? testes { get; set; }
	private ClientWrapper? clientWrapper { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		token = user.FindFirst("Token")?.Value;
		userName = user.FindFirst(ClaimTypes.Name)?.Value;

		if (!string.IsNullOrEmpty(token))
		{
			await ClienteService.LoadData(token);

			if (ClienteService.FastClients != null && ClienteService.Testes != null)
			{
				fastClients = ClienteService.FastClients;
				testes = ClienteService.Testes;
				clientWrapper = new ClientWrapper(fastClients, testes);
			}
		}
	}



	public class ClientWrapper
	{
		private List<FastClient> fastClients;
		private List<Teste> testes;

		public ClientWrapper(List<FastClient> fastClients, List<Teste> testes)
		{
			this.fastClients = fastClients;
			this.testes = testes;
		}

		private DateTime ConvertFromUnixTimestamp(long timestamp)
		{
			DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(timestamp);
			return dateTimeOffset.DateTime;
		}

		public List<FastClient> GetClientsExpiringInNext3Days()
		{
			DateTime now = DateTime.Now;
			DateTime next3Days = now.AddDays(3);

			return fastClients.Where(client =>
				ConvertFromUnixTimestamp(client.exp_date) >= now &&
				ConvertFromUnixTimestamp(client.exp_date) <= next3Days).ToList();
		}

		public List<FastClient> GetClientsExpiringToday()
		{
			DateTime today = DateTime.Today;

			return fastClients.Where(client =>
				ConvertFromUnixTimestamp(client.exp_date).Date == today).ToList();
		}

		public List<FastClient> GetClientsExpiringInFuture()
		{
			DateTime now = DateTime.Now;

			return fastClients.Where(client =>
				ConvertFromUnixTimestamp(client.exp_date) > now).ToList();
		}
	}
}
